name: RDP

on:
  workflow_dispatch:
    inputs:
      run_id:
        description: 'Unique run identifier'
        required: false
        type: string
        default: 'default'

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 3600

    steps:
      - name: Track Run ID
        shell: powershell
        run: |
          $runId = "${{ github.event.inputs.run_id || 'default' }}"
          Write-Host "TRACK_ID: $runId"

      - name: Configure Core RDP Settings
        shell: powershell
        run: |
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "SecurityLayer" -Value 0 -Force
          netsh advfirewall firewall delete rule name="RDP-Tailscale" 2>$null
          netsh advfirewall firewall add rule name="RDP-Tailscale" dir=in action=allow protocol=TCP localport=3389
          Restart-Service -Name TermService -Force
          Write-Host "RDP configured."

      - name: Create RDP User with Secure Password
        shell: powershell
        run: |
          Add-Type -AssemblyName System.Security
          $charSet = @{
              Upper = [char[]](65..90)
              Lower = [char[]](97..122)
              Number = [char[]](48..57)
              Special = ([char[]](33..47) + [char[]](58..64) + [char[]](91..96) + [char[]](123..126))
          }
          $rawPassword = @()
          $rawPassword += $charSet.Upper | Get-Random -Count 4
          $rawPassword += $charSet.Lower | Get-Random -Count 4
          $rawPassword += $charSet.Number | Get-Random -Count 4
          $rawPassword += $charSet.Special | Get-Random -Count 4
          $password = -join ($rawPassword | Sort-Object { Get-Random })
          $securePass = ConvertTo-SecureString $password -AsPlainText -Force
          New-LocalUser -Name "RDP" -Password $securePass -AccountNeverExpires
          Add-LocalGroupMember -Group "Administrators" -Member "RDP"
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member "RDP"
          
          if (-not (Get-LocalUser -Name "RDP")) {
              Write-Error "User creation failed"
              exit 1
          }
          
          echo "RDP_PASSWORD=$password" >> $env:GITHUB_ENV
          Write-Host "PASS: $password"

      - name: Install Tailscale with Retry
        shell: powershell
        run: |
          $tsUrl = "https://pkgs.tailscale.com/stable/tailscale-setup-1.82.0-amd64.msi"  # Original working version
          $tempDir = "C:\temp"
          $installerPath = "$tempDir\tailscale.msi"
          
          if (-not (Test-Path $tempDir)) { New-Item -ItemType Directory -Path $tempDir -Force | Out-Null }
          
          ipconfig /flushdns 2>$null
          Write-Host "DNS cache flushed."
          
          $maxRetries = 3
          $retry = 0
          $success = $false
          while ($retry -lt $maxRetries -and -not $success) {
              $retry++
              Write-Host "Download attempt $retry/$maxRetries"
              if (Test-Path $installerPath) { Remove-Item $installerPath -Force }
              try {
                  Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath -TimeoutSec 120 -ErrorAction Stop
                  $fileSize = (Get-Item $installerPath).Length
                  Write-Host "Downloaded size: $fileSize bytes"
                  if ((Test-Path $installerPath) -and $fileSize -gt 10000000) {  # Loose check >10MB for 1.82.0
                      $success = $true
                      Write-Host "Download succeeded!"
                  } else {
                      throw "File missing or too small ($fileSize bytes)"
                  }
              } catch {
                  Write-Host "Download failed: $($_.Exception.Message)"
                  Remove-Item $installerPath -Force -ErrorAction SilentlyContinue
                  if ($retry -lt $maxRetries) {
                      Start-Sleep -Seconds 15
                      ipconfig /flushdns 2>$null
                  }
              }
          }
          if (-not $success) {
              Write-Error "Download failed after retries"
              exit 1
          }
          
          Start-Process msiexec.exe -ArgumentList "/i `"$installerPath`" /quiet /norestart" -Wait -NoNewWindow
          Remove-Item $installerPath -Force -ErrorAction SilentlyContinue
          Write-Host "Tailscale installed successfully."

      - name: Establish Tailscale Connection
        shell: powershell
        run: |
          $tailscalePath = "$env:ProgramFiles\Tailscale\tailscale.exe"
          if (-not (Test-Path $tailscalePath)) {
              Write-Error "Tailscale exe not found"
              exit 1
          }
          & $tailscalePath up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname=gh-runner-${{ github.run_id }} --accept-routes --accept-dns=false
          
          $tsIP = $null
          $retries = 0
          while (-not $tsIP -and $retries -lt 30) {
              Start-Sleep -Seconds 5
              $ipOutput = & $tailscalePath ip --4 2>$null
              if ($ipOutput -and $ipOutput.Trim()) {
                  $tsIP = $ipOutput.Trim()
                  echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV
                  Write-Host "IP: $tsIP"
                  break
              }
              $retries++
          }
          
          if (-not $tsIP) {
              Write-Error "Tailscale IP not assigned"
              exit 1
          }

      - name: Verify RDP Accessibility
        shell: powershell
        run: |
          $testResult = Test-NetConnection -ComputerName $env:TAILSCALE_IP -Port 3389 -WarningAction SilentlyContinue
          if (-not $testResult.TcpTestSucceeded) {
              Write-Error "RDP port failed"
              exit 1
          }
          Write-Host "RDP verified."

      - name: Maintain Connection
        shell: powershell
        run: |
          Write-Host "`n=== RDP READY ==="
          Write-Host "IP: $env:TAILSCALE_IP"
          Write-Host "USER: RDP"
          Write-Host "PASS: $env:RDP_PASSWORD"
          Write-Host "================`n"
          
          while ($true) {
              Write-Host "[$(Get-Date)] Active - Connect via Tailscale to $env:TAILSCALE_IP"
              Start-Sleep -Seconds 300
          }
