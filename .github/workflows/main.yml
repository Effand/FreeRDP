name: FreeRDP

on:
  workflow_dispatch:
    inputs:
      run_id:
        description: 'Unique run identifier'
        required: false
        type: string
        default: 'default'

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 360

    steps:
      - name: Track Run ID
        shell: powershell
        run: |
          $runId = "${{ github.event.inputs.run_id || 'default' }}"
          Write-Host "Unique Run ID: $runId"
          echo "TRACK_RUN_ID=$runId" >> $env:GITHUB_ENV

      - name: Configure Core RDP Settings
        shell: powershell
        run: |
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -Name "fDenyTSConnections" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "UserAuthentication" -Value 0 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -Name "SecurityLayer" -Value 0 -Force
          netsh advfirewall firewall delete rule name="FreeRDP-Tailscale" 2>$null
          netsh advfirewall firewall add rule name="FreeRDP-Tailscale" dir=in action=allow protocol=TCP localport=3389
          Restart-Service -Name TermService -Force
          Write-Host "RDP configured successfully."

      - name: Create RDP User with Secure Password
        shell: powershell
        run: |
          Add-Type -AssemblyName System.Security
          $charSet = @{
              Upper = [char[]](65..90)
              Lower = [char[]](97..122)
              Number = [char[]](48..57)
              Special = ([char[]](33..47) + [char[]](58..64) + [char[]](91..96) + [char[]](123..126))
          }
          $rawPassword = @()
          $rawPassword += $charSet.Upper | Get-Random -Count 4
          $rawPassword += $charSet.Lower | Get-Random -Count 4
          $rawPassword += $charSet.Number | Get-Random -Count 4
          $rawPassword += $charSet.Special | Get-Random -Count 4
          $password = -join ($rawPassword | Sort-Object { Get-Random })
          $securePass = ConvertTo-SecureString $password -AsPlainText -Force
          New-LocalUser -Name "RDP" -Password $securePass -AccountNeverExpires
          Add-LocalGroupMember -Group "Administrators" -Member "RDP"
          Add-LocalGroupMember -Group "Remote Desktop Users" -Member "RDP"
          echo "RDP_PASSWORD=$password" >> $env:GITHUB_ENV
          Write-Host "=== FreeRDP CREDENTIALS ==="
          Write-Host "Username: RDP"
          Write-Host "Password: $password"
          Write-Host "=========================="

      - name: Install Tailscale with Retry
        shell: powershell
        run: |
          $tsUrl = "https://pkgs.tailscale.com/stable/tailscale.msi"
          $installerPath = "$env:TEMP\tailscale.msi"
          $maxRetries = 3
          $retry = 0
          $success = $false
          while ($retry -lt $maxRetries -and -not $success) {
              try {
                  Write-Host "Download attempt $($retry + 1)/$maxRetries"
                  Invoke-WebRequest -Uri $tsUrl -OutFile $installerPath -TimeoutSec 60 -ErrorAction Stop
                  $success = $true
                  Write-Host "Download succeeded!"
              } catch {
                  Write-Host "Download failed: $($_.Exception.Message)"
                  $retry++
                  if ($retry -lt $maxRetries) {
                      Start-Sleep -Seconds 10
                  }
              }
          }
          if (-not $success) {
              Write-Error "Download failed after $maxRetries attempts"
              exit 1
          }
          Start-Process msiexec.exe -ArgumentList "/i `"$installerPath`" /quiet /norestart" -Wait -NoNewWindow
          Remove-Item $installerPath -Force
          Write-Host "Tailscale installed successfully."

      - name: Establish Tailscale Connection
        shell: powershell
        run: |
          $tailscalePath = "$env:ProgramFiles\Tailscale\tailscale.exe"
          if (-not (Test-Path $tailscalePath)) {
              Write-Error "Tailscale not found after install"
              exit 1
          }
          & $tailscalePath up --authkey=${{ secrets.TAILSCALE_AUTH_KEY }} --hostname=free-rdp-${{ github.run_id }} --accept-routes --accept-dns=false
          $tsIP = $null
          $retries = 0
          while (-not $tsIP -and $retries -lt 30) {
              Start-Sleep -Seconds 5
              $ipOutput = & $tailscalePath ip --4 2>$null
              if ($ipOutput) { 
                  $tsIP = $ipOutput.Trim() 
                  Write-Host "Got IP on retry $($retries + 1): $tsIP"
              }
              $retries++
          }
          if (-not $tsIP) { 
              Write-Error "Failed to get Tailscale IP after retries"
              exit 1 
          }
          echo "TAILSCALE_IP=$tsIP" >> $env:GITHUB_ENV
          Write-Host "Tailscale IP: $tsIP"

      - name: Verify RDP Accessibility
        shell: powershell
        run: |
          $test = Test-NetConnection -ComputerName $env:TAILSCALE_IP -Port 3389 -WarningAction SilentlyContinue
          if (-not $test.TcpTestSucceeded) { 
              Write-Error "RDP port 3389 not accessible: $($test.TcpTestSucceeded)"
              exit 1 
          }
          Write-Host "RDP verified on $env:TAILSCALE_IP:3389"

      - name: Maintain Connection
        shell: powershell
        run: |
          $endTime = (Get-Date).AddMinutes(350)
          while ((Get-Date) -lt $endTime) {
              Write-Host "[$(Get-Date)] FreeRDP Active - IP: $env:TAILSCALE_IP | User: RDP | Pass: $env:RDP_PASSWORD"
              Start-Sleep -Seconds 300
          }
          Write-Host "Session ending due to timeout."
